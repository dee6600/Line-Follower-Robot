
2irfinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  00000480  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d9  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ac  00000000  00000000  00000579  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f1  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000143  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019e  00000000  00000000  000012fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  8a:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_com>:
}

//LCD command line
 void lcd_com(char val2)
 {
	PORTC=val2;
  92:	85 bb       	out	0x15, r24	; 21
	PORTC&=~(1<<rs);
  94:	a8 98       	cbi	0x15, 0	; 21
	PORTC&=~(1<<rw);
  96:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);
  98:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 ea       	ldi	r24, 0xA0	; 160
  9c:	9f e0       	ldi	r25, 0x0F	; 15
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_com+0xc>
	_delay_ms(1);
	PORTC&=~(1<<en);
  a2:	aa 98       	cbi	0x15, 2	; 21
 }
  a4:	08 95       	ret

000000a6 <lcd_efmodeC>:
 }


//LCD 8bit to 4 bit mode for command
void lcd_efmodeC(char val)
{
  a6:	1f 93       	push	r17
  a8:	18 2f       	mov	r17, r24
   char div;
	
	div = val & 0xF0;		//mask lower nibble because PA4-PA7 pins are used. 
	lcd_com(div);			// send to LCD
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	0e 94 49 00 	call	0x92	; 0x92 <lcd_com>
 
	div = ((val<<4) & 0xF0);	//shift 4-bit and mask
	lcd_com(div);	
  b0:	81 2f       	mov	r24, r17
  b2:	82 95       	swap	r24
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_com>

}
  ba:	1f 91       	pop	r17
  bc:	08 95       	ret

000000be <lcd_init>:

//LCD init
 void lcd_init()
 {
	//lcd_efmodeC(0x01);		//clear LCD
	DDRC=0xff;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 bb       	out	0x14, r24	; 20
	lcd_efmodeC(0x02);		//initialization, for 4 bit mode
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	
	lcd_efmodeC(0x28);		//selecting data is writen in CGRAM or DDRAM
  c8:	88 e2       	ldi	r24, 0x28	; 40
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
		
	lcd_efmodeC(0x06);		//Sets mode to increment the
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
							//address by one and to shift the
							//cursor to the right at the time of
							//write to the DD/CGRAM.
							//Display is not shifted.
	
	lcd_efmodeC(0x0C);		//Turns on display and cursor.
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
							//Entire display is in space mode		
	
 }
  da:	08 95       	ret

000000dc <lcd_data>:
 }

 //LCD DATA line
 void lcd_data(char val3)
 {
	PORTC=val3;
  dc:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<rs);
  de:	a8 9a       	sbi	0x15, 0	; 21
	PORTC&=~(1<<rw);
  e0:	a9 98       	cbi	0x15, 1	; 21
	PORTC|=(1<<en);
  e2:	aa 9a       	sbi	0x15, 2	; 21
  e4:	80 ea       	ldi	r24, 0xA0	; 160
  e6:	9f e0       	ldi	r25, 0x0F	; 15
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_data+0xc>
	_delay_ms(1);
	PORTC&=~(1<<en);
  ec:	aa 98       	cbi	0x15, 2	; 21


 }
  ee:	08 95       	ret

000000f0 <lcd_efmodeD>:
	lcd_com(div);	

}
//LCD 8bit to 4 bit mode for data
void lcd_efmodeD(char val1)
{
  f0:	1f 93       	push	r17
  f2:	18 2f       	mov	r17, r24
   char div1;
	div1 = val1 & 0xF0;		//mask lower nibble because PA4-PA7 pins are used. 
	lcd_data(div1);			// send to LCD
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
 
	div1 = ((val1<<4) & 0xF0);	//shift 4-bit and mask
	lcd_data(div1);	
  fa:	81 2f       	mov	r24, r17
  fc:	82 95       	swap	r24
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
	
}
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <lcd_gotoxy>:

 }

//LCD cursor possition
 void lcd_gotoxy(int x,int y)
 {
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
	pos=15-x;
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	8c 1b       	sub	r24, r28
 114:	9d 0b       	sbc	r25, r29
 116:	90 93 6b 00 	sts	0x006B, r25
 11a:	80 93 6a 00 	sts	0x006A, r24
	int xk=0x80,yk=0xC0;	
	if(y==1)
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	71 05       	cpc	r23, r1
 122:	31 f4       	brne	.+12     	; 0x130 <lcd_gotoxy+0x28>
	{
	lcd_efmodeC(0xC0);
 124:	80 ec       	ldi	r24, 0xC0	; 192
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	yk = x | 0xC0;
    lcd_efmodeC(yk);
 12a:	9e 01       	movw	r18, r28
 12c:	20 6c       	ori	r18, 0xC0	; 192
 12e:	02 c0       	rjmp	.+4      	; 0x134 <lcd_gotoxy+0x2c>
  	}
	else
	{
	xk = x | 0x80;
    lcd_efmodeC(xk);
 130:	9e 01       	movw	r18, r28
 132:	20 68       	ori	r18, 0x80	; 128
 134:	82 2f       	mov	r24, r18
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	}
 } 
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_printc>:

 //LCD print
 void lcd_printc(unsigned char *data0)
 {
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	e8 2e       	mov	r14, r24
 156:	f1 2c       	mov	r15, r1
 158:	1f c0       	rjmp	.+62     	; 0x198 <lcd_printc+0x58>
	 int i=0;
	 while(data0[i]!='\0')
		{
		if(i<16){lcd_efmodeD(data0[i]);_delay_ms(MRP);}
 15a:	c0 31       	cpi	r28, 0x10	; 16
 15c:	d1 05       	cpc	r29, r1
 15e:	2c f4       	brge	.+10     	; 0x16a <lcd_printc+0x2a>
 160:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
 164:	c7 01       	movw	r24, r14
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <lcd_printc+0x26>

		if(i == pos){lcd_efmodeC(0xC0);}
 16a:	80 91 6a 00 	lds	r24, 0x006A
 16e:	90 91 6b 00 	lds	r25, 0x006B
 172:	c8 17       	cp	r28, r24
 174:	d9 07       	cpc	r29, r25
 176:	19 f4       	brne	.+6      	; 0x17e <lcd_printc+0x3e>
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>

		if(i>15){lcd_efmodeD(data0[i]);_delay_ms(MRP);}
 17e:	c0 31       	cpi	r28, 0x10	; 16
 180:	d1 05       	cpc	r29, r1
 182:	3c f0       	brlt	.+14     	; 0x192 <lcd_printc+0x52>
 184:	f8 01       	movw	r30, r16
 186:	80 81       	ld	r24, Z
 188:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
 18c:	c7 01       	movw	r24, r14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_printc+0x4e>
		i++;
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	0f 5f       	subi	r16, 0xFF	; 255
 196:	1f 4f       	sbci	r17, 0xFF	; 255

 //LCD print
 void lcd_printc(unsigned char *data0)
 {
	 int i=0;
	 while(data0[i]!='\0')
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
 19c:	88 23       	and	r24, r24
 19e:	e9 f6       	brne	.-70     	; 0x15a <lcd_printc+0x1a>
		if(i == pos){lcd_efmodeC(0xC0);}

		if(i>15){lcd_efmodeD(data0[i]);_delay_ms(MRP);}
		i++;
		}
 }
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <lcd_printnum>:

//LCD number
void lcd_printnum(long signed int val)
{	
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	7b 01       	movw	r14, r22
 1b8:	8c 01       	movw	r16, r24
	
	char s;
	lcd_efmodeC(0x04);
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	
	s=val%10;
	lcd_efmodeD(48+s);
 1c0:	c8 01       	movw	r24, r16
 1c2:	b7 01       	movw	r22, r14
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 b2 01 	call	0x364	; 0x364 <__divmodsi4>
 1d0:	86 2f       	mov	r24, r22
 1d2:	80 5d       	subi	r24, 0xD0	; 208
 1d4:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
  	val=val/10;
	s=val%10;
	lcd_efmodeD(48+s);
 1d8:	c8 01       	movw	r24, r16
 1da:	b7 01       	movw	r22, r14
 1dc:	2a e0       	ldi	r18, 0x0A	; 10
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	0e 94 b2 01 	call	0x364	; 0x364 <__divmodsi4>
 1e8:	ca 01       	movw	r24, r20
 1ea:	b9 01       	movw	r22, r18
 1ec:	2a e0       	ldi	r18, 0x0A	; 10
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	0e 94 b2 01 	call	0x364	; 0x364 <__divmodsi4>
 1f8:	86 2f       	mov	r24, r22
 1fa:	80 5d       	subi	r24, 0xD0	; 208
 1fc:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
	lcd_efmodeC(0x06);
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	}
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	08 95       	ret

00000210 <lcd_number>:
void lcd_number(unsigned int val)
{	
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
	char s;
	lcd_efmodeC(0x04);
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	if(val==0)
 21c:	20 97       	sbiw	r28, 0x00	; 0
 21e:	91 f4       	brne	.+36     	; 0x244 <lcd_number+0x34>
	lcd_efmodeD(48+val);
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
 226:	0e c0       	rjmp	.+28     	; 0x244 <lcd_number+0x34>
	while(val!=0)
	{
	s=val%10; 
	lcd_efmodeD(48+s);	
 228:	ce 01       	movw	r24, r28
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 9e 01 	call	0x33c	; 0x33c <__udivmodhi4>
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_efmodeD>
	val=val/10;
 238:	ce 01       	movw	r24, r28
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 9e 01 	call	0x33c	; 0x33c <__udivmodhi4>
 242:	eb 01       	movw	r28, r22
{	
	char s;
	lcd_efmodeC(0x04);
	if(val==0)
	lcd_efmodeD(48+val);
	while(val!=0)
 244:	20 97       	sbiw	r28, 0x00	; 0
 246:	81 f7       	brne	.-32     	; 0x228 <lcd_number+0x18>
	{
	s=val%10; 
	lcd_efmodeD(48+s);	
	val=val/10;
	}
	lcd_efmodeC(0x06);
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
	}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <lcd_clear>:
//LCD clear
void lcd_clear()
	{
	lcd_efmodeC(0x01);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_efmodeC>
 25a:	80 ed       	ldi	r24, 0xD0	; 208
 25c:	97 e0       	ldi	r25, 0x07	; 7
 25e:	20 e9       	ldi	r18, 0x90	; 144
 260:	31 e0       	ldi	r19, 0x01	; 1
 262:	f9 01       	movw	r30, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_clear+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26a:	d9 f7       	brne	.-10     	; 0x262 <lcd_clear+0xe>
	_delay_ms(200);
	}
 26c:	08 95       	ret

0000026e <fwd>:
#define F_CPU 16000000
#include<util/delay.h>
#include<i3indya/lcd16.h>
void fwd()
{
PORTB=0b00001001;
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	88 bb       	out	0x18, r24	; 24
 272:	80 e9       	ldi	r24, 0x90	; 144
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	20 e9       	ldi	r18, 0x90	; 144
 278:	31 e0       	ldi	r19, 0x01	; 1
 27a:	f9 01       	movw	r30, r18
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <fwd+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 280:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 282:	d9 f7       	brne	.-10     	; 0x27a <fwd+0xc>
	_delay_ms(40);
	PORTB=0b00000000;
 284:	18 ba       	out	0x18, r1	; 24
 286:	8c e2       	ldi	r24, 0x2C	; 44
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	20 e9       	ldi	r18, 0x90	; 144
 28c:	31 e0       	ldi	r19, 0x01	; 1
 28e:	f9 01       	movw	r30, r18
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <fwd+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 294:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	d9 f7       	brne	.-10     	; 0x28e <fwd+0x20>
	_delay_ms(30);

}
 298:	08 95       	ret

0000029a <right>:
void right()
{
 29a:	1f 93       	push	r17
	while(1)
		{
			lcd_gotoxy(4,0);
			lcd_printc("ontr");		
			PORTB=0b00000001;
 29c:	11 e0       	ldi	r17, 0x01	; 1
}
void right()
{
	while(1)
		{
			lcd_gotoxy(4,0);
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	0e 94 84 00 	call	0x108	; 0x108 <lcd_gotoxy>
			lcd_printc("ontr");		
 2aa:	80 e6       	ldi	r24, 0x60	; 96
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_printc>
			PORTB=0b00000001;
 2b2:	18 bb       	out	0x18, r17	; 24
			if((PINA & 0b00000111)==0b00000101)
 2b4:	89 b3       	in	r24, 0x19	; 25
 2b6:	87 70       	andi	r24, 0x07	; 7
 2b8:	85 30       	cpi	r24, 0x05	; 5
 2ba:	89 f7       	brne	.-30     	; 0x29e <right+0x4>
			{
				break;
			}
		}
}
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <left>:
void left()
{
 2c0:	1f 93       	push	r17
		while(1)
		{
			lcd_gotoxy(4,0);
			lcd_printc("ontl");
			PORTB=0b00001000;
 2c2:	18 e0       	ldi	r17, 0x08	; 8
}
void left()
{
		while(1)
		{
			lcd_gotoxy(4,0);
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_gotoxy>
			lcd_printc("ontl");
 2d0:	85 e6       	ldi	r24, 0x65	; 101
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_printc>
			PORTB=0b00001000;
 2d8:	18 bb       	out	0x18, r17	; 24
			if((PINA & 0b00000111)==0b00000101)
 2da:	89 b3       	in	r24, 0x19	; 25
 2dc:	87 70       	andi	r24, 0x07	; 7
 2de:	85 30       	cpi	r24, 0x05	; 5
 2e0:	89 f7       	brne	.-30     	; 0x2c4 <left+0x4>
			{
				break;
			}
		}
}
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <stop>:
void stop()
{
	PORTB=0b00000000;
 2e6:	18 ba       	out	0x18, r1	; 24
}
 2e8:	08 95       	ret

000002ea <main>:
int main()
	{
	DDRA=0;
 2ea:	1a ba       	out	0x1a, r1	; 26
	lcd_init();
 2ec:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_init>
	DDRB=0xff;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	87 bb       	out	0x17, r24	; 23
	while(1)
	{
		if((PINA & 0b00000101)==0b00000101)
 2f4:	89 b3       	in	r24, 0x19	; 25
 2f6:	85 70       	andi	r24, 0x05	; 5
 2f8:	85 30       	cpi	r24, 0x05	; 5
 2fa:	11 f4       	brne	.+4      	; 0x300 <main+0x16>
		{
			fwd();
 2fc:	0e 94 37 01 	call	0x26e	; 0x26e <fwd>
		}
		if((PINA & 0b00000101)==0b00000001)
 300:	89 b3       	in	r24, 0x19	; 25
 302:	85 70       	andi	r24, 0x05	; 5
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	11 f4       	brne	.+4      	; 0x30c <main+0x22>
		{
			left();
 308:	0e 94 60 01 	call	0x2c0	; 0x2c0 <left>
		}
		if((PINA & 0b00000101)==0b00000100)
 30c:	89 b3       	in	r24, 0x19	; 25
 30e:	85 70       	andi	r24, 0x05	; 5
 310:	84 30       	cpi	r24, 0x04	; 4
 312:	11 f4       	brne	.+4      	; 0x318 <main+0x2e>
		{
			right();
 314:	0e 94 4d 01 	call	0x29a	; 0x29a <right>
		}
		if((PINA & 0b00000101)==0b00000000)
 318:	89 b3       	in	r24, 0x19	; 25
 31a:	85 70       	andi	r24, 0x05	; 5
 31c:	11 f4       	brne	.+4      	; 0x322 <main+0x38>
		{
			fwd();
 31e:	0e 94 37 01 	call	0x26e	; 0x26e <fwd>
		}
		if((PINA & 0b00000111)==0b00000111)
 322:	89 b3       	in	r24, 0x19	; 25
 324:	87 70       	andi	r24, 0x07	; 7
 326:	87 30       	cpi	r24, 0x07	; 7
 328:	11 f4       	brne	.+4      	; 0x32e <main+0x44>
		{
			fwd();
 32a:	0e 94 37 01 	call	0x26e	; 0x26e <fwd>
		}
		if((PINA & 0b00000101)==0b00000101)
 32e:	89 b3       	in	r24, 0x19	; 25
 330:	85 70       	andi	r24, 0x05	; 5
 332:	85 30       	cpi	r24, 0x05	; 5
 334:	f9 f6       	brne	.-66     	; 0x2f4 <main+0xa>
		{
			fwd();
 336:	0e 94 37 01 	call	0x26e	; 0x26e <fwd>
 33a:	dc cf       	rjmp	.-72     	; 0x2f4 <main+0xa>

0000033c <__udivmodhi4>:
 33c:	aa 1b       	sub	r26, r26
 33e:	bb 1b       	sub	r27, r27
 340:	51 e1       	ldi	r21, 0x11	; 17
 342:	07 c0       	rjmp	.+14     	; 0x352 <__udivmodhi4_ep>

00000344 <__udivmodhi4_loop>:
 344:	aa 1f       	adc	r26, r26
 346:	bb 1f       	adc	r27, r27
 348:	a6 17       	cp	r26, r22
 34a:	b7 07       	cpc	r27, r23
 34c:	10 f0       	brcs	.+4      	; 0x352 <__udivmodhi4_ep>
 34e:	a6 1b       	sub	r26, r22
 350:	b7 0b       	sbc	r27, r23

00000352 <__udivmodhi4_ep>:
 352:	88 1f       	adc	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	5a 95       	dec	r21
 358:	a9 f7       	brne	.-22     	; 0x344 <__udivmodhi4_loop>
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	bc 01       	movw	r22, r24
 360:	cd 01       	movw	r24, r26
 362:	08 95       	ret

00000364 <__divmodsi4>:
 364:	97 fb       	bst	r25, 7
 366:	09 2e       	mov	r0, r25
 368:	05 26       	eor	r0, r21
 36a:	0e d0       	rcall	.+28     	; 0x388 <__divmodsi4_neg1>
 36c:	57 fd       	sbrc	r21, 7
 36e:	04 d0       	rcall	.+8      	; 0x378 <__divmodsi4_neg2>
 370:	14 d0       	rcall	.+40     	; 0x39a <__udivmodsi4>
 372:	0a d0       	rcall	.+20     	; 0x388 <__divmodsi4_neg1>
 374:	00 1c       	adc	r0, r0
 376:	38 f4       	brcc	.+14     	; 0x386 <__divmodsi4_exit>

00000378 <__divmodsi4_neg2>:
 378:	50 95       	com	r21
 37a:	40 95       	com	r20
 37c:	30 95       	com	r19
 37e:	21 95       	neg	r18
 380:	3f 4f       	sbci	r19, 0xFF	; 255
 382:	4f 4f       	sbci	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255

00000386 <__divmodsi4_exit>:
 386:	08 95       	ret

00000388 <__divmodsi4_neg1>:
 388:	f6 f7       	brtc	.-4      	; 0x386 <__divmodsi4_exit>
 38a:	90 95       	com	r25
 38c:	80 95       	com	r24
 38e:	70 95       	com	r23
 390:	61 95       	neg	r22
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	08 95       	ret

0000039a <__udivmodsi4>:
 39a:	a1 e2       	ldi	r26, 0x21	; 33
 39c:	1a 2e       	mov	r1, r26
 39e:	aa 1b       	sub	r26, r26
 3a0:	bb 1b       	sub	r27, r27
 3a2:	fd 01       	movw	r30, r26
 3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <__udivmodsi4_ep>

000003a6 <__udivmodsi4_loop>:
 3a6:	aa 1f       	adc	r26, r26
 3a8:	bb 1f       	adc	r27, r27
 3aa:	ee 1f       	adc	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	a2 17       	cp	r26, r18
 3b0:	b3 07       	cpc	r27, r19
 3b2:	e4 07       	cpc	r30, r20
 3b4:	f5 07       	cpc	r31, r21
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__udivmodsi4_ep>
 3b8:	a2 1b       	sub	r26, r18
 3ba:	b3 0b       	sbc	r27, r19
 3bc:	e4 0b       	sbc	r30, r20
 3be:	f5 0b       	sbc	r31, r21

000003c0 <__udivmodsi4_ep>:
 3c0:	66 1f       	adc	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	1a 94       	dec	r1
 3ca:	69 f7       	brne	.-38     	; 0x3a6 <__udivmodsi4_loop>
 3cc:	60 95       	com	r22
 3ce:	70 95       	com	r23
 3d0:	80 95       	com	r24
 3d2:	90 95       	com	r25
 3d4:	9b 01       	movw	r18, r22
 3d6:	ac 01       	movw	r20, r24
 3d8:	bd 01       	movw	r22, r26
 3da:	cf 01       	movw	r24, r30
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
